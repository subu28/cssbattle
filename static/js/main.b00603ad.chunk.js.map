{"version":3,"sources":["components/nav/index.js","components/IDE/index.js","lib/parse.js","components/Editor/index.js","components/Output/index.js","components/App/index.js","index.js"],"names":["Nav","scrollRef","useRef","scrollTo","pos","current","scrollLeft","className","onClick","ref","items","i","push","list","IDE","parsed","input","lines","split","result","line","tokens","length","text","substr","class","undefined","newTokens","string","buffer","first","tagOpen","j","join","splice","foundStylesToParse","inRuleBlock","k","parse","map","token","Editor","Output","src","encodeURIComponent","App","ReactDOM","render","document","getElementById"],"mappings":"8PA+BeA,EA5BH,WACV,IAAMC,EAAYC,mBAEZC,EAAW,SAAAC,GACZH,EAAUI,UACXJ,EAAUI,QAAQC,WAAaL,EAAUI,QAAQC,WAAaF,IAWlE,OACE,sBAAKG,UAAU,SAAf,UACE,qBAAKA,UAAU,aAAf,kBACA,qBAAKA,UAAU,yBAAyBC,QAAS,kBAAML,GAAU,MAAjE,SAAuE,qBAAKI,UAAU,kBACtF,qBAAKE,IAAKR,EAAWM,UAAU,aAA/B,SAXS,WAEX,IADA,IAAMG,EAAQ,GACLC,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAME,KAAK,qBAAKL,UAAU,aAAf,SAAsCI,GAALA,IAE9C,OAAOD,EAOFG,KAEH,qBAAKN,UAAU,yBAAyBC,QAAS,kBAAML,EAAS,MAAhE,SAAsE,qBAAKI,UAAU,sB,qBCvB3F,IAWeO,EAXH,WACV,IAEMC,ECNO,SAAeC,GAG5B,IAHmC,EAG7BC,EAAQD,EAAME,MAAM,MAGpBC,EAAS,GANoB,cAOhBF,GAPgB,IAOnC,2BAEE,IAFyB,IAAhBG,EAAe,QAClBC,EAAS,GACNV,EAAI,EAAGA,EAAIS,EAAKE,OAAQX,IAAK,CACpC,GAAgB,MAAZS,EAAKT,GAKF,CACLU,EAAOT,KAAK,CACVW,KAAMH,EAAKI,OAAOb,GAClBc,WAAOC,IAETP,EAAOP,KAAKS,GACZ,MAVAA,EAAOT,KAAK,CACVW,KAAM,GACNE,MAAO,YAboB,8BA2BnC,cAAqBN,EAArB,eACE,IADG,IAAME,EAAM,KACNV,EAAI,EAAGA,EAAIU,EAAOC,OAAQX,IACjC,IAAKU,EAAOV,GAAGc,MAAO,CAMpB,IALA,IAAME,EAAY,GACZC,EAASP,EAAOV,GAAGY,KACrBM,EAAS,GACTC,GAAQ,EACRC,GAAU,EACLC,EAAI,EAAGA,EAAIJ,EAAON,OAAQU,IACf,MAAdJ,EAAOI,KAA0B,IAAZD,GACnBF,EAAOP,SACTK,EAAUf,KAAK,CACbW,KAAMM,EAAOI,KAAK,IAClBR,WAAOC,IAETG,EAAS,IAEXF,EAAUf,KAAK,CACbW,KAAM,IACNE,MAAO,WAEW,MAAhBG,EAAOI,EAAE,KACXA,GAAQ,EACRL,EAAUf,KAAK,CACbW,KAAM,IACNE,MAAO,YAGXK,GAAQ,EACRC,GAAU,GACa,MAAdH,EAAOI,KAA2B,IAAZD,GAC/BJ,EAAUf,KAAK,CACbW,KAAMM,EAAOI,KAAK,IAClBR,MAAOK,EAAQ,MAAQ,SAEzBA,GAAQ,EACRD,EAAS,GACTF,EAAUf,KAAK,CACbW,KAAM,IACNE,MAAO,WAEc,MAAdG,EAAOI,KAA0B,IAAZD,GAC9BJ,EAAUf,KAAK,CACbW,KAAMM,EAAOI,KAAK,IAClBR,MAAOK,EAAQ,MAAQ,SAEzBA,GAAQ,EACRD,EAAS,GACTF,EAAUf,KAAK,CACbW,KAAM,IACNE,MAAO,WAETM,GAAU,GAEVF,EAAOjB,KAAKgB,EAAOI,IAGnBH,EAAOP,SACTK,EAAUf,KAAK,CACbW,KAAMM,EAAOI,KAAK,IAClBR,WAAOC,IAETG,EAAS,IAEXR,EAAOa,OAAP,MAAAb,EAAM,CAAQV,EAAG,GAAX,OAAiBgB,IAQ7B,IAFA,IAAIQ,GAAqB,EACrBC,GAAc,EACTzB,EAAI,EAAGA,EAAIQ,EAAOG,OAAQX,IACjC,IAAK,IAAIqB,EAAI,EAAGA,EAAIb,EAAOR,GAAGW,OAAQU,IACpC,GAAKG,GAMH,IAAKhB,EAAOR,GAAGqB,GAAGP,MAAO,CAIvB,IAJwB,IAAD,EACjBE,EAAY,GACdC,EAAST,EAAOR,GAAGqB,GAAGT,KACtBM,EAAS,GACJQ,EAAI,EAAGA,EAAIT,EAAON,OAAQe,IACf,MAAdT,EAAOS,IACTV,EAAUf,KAAK,CACbW,KAAMM,EAAOI,KAAK,IAClBR,MAAO,cAETE,EAAUf,KAAK,CACbW,KAAM,IACNE,MAAO,WAETI,EAAS,GACTO,GAAc,GACS,MAAdR,EAAOS,IACZR,EAAOP,SACTK,EAAUf,KAAK,CACbW,KAAMM,EAAOI,KAAK,IAClBR,MAAO,UAETI,EAAS,IAEXF,EAAUf,KAAK,CACbW,KAAM,IACNE,MAAO,WAETW,GAAc,GACS,MAAdR,EAAOS,IAAcD,GAC9BT,EAAUf,KAAK,CACbW,KAAMM,EAAOI,KAAK,IAClBR,MAAO,QAETE,EAAUf,KAAK,CACbW,KAAM,IACNE,MAAO,WAETI,EAAS,IACc,MAAdD,EAAOS,IAAcD,GAC9BT,EAAUf,KAAK,CACbW,KAAMM,EAAOI,KAAK,IAClBR,MAAO,UAETE,EAAUf,KAAK,CACbW,KAAM,IACNE,MAAO,WAETI,EAAS,IAETA,EAAOjB,KAAKgB,EAAOS,IAGnBR,EAAOP,SACTK,EAAUf,KAAK,CACbW,KAAMM,EAAOI,KAAK,IAClBR,MAAO,UAETI,EAAS,KAEX,EAAAV,EAAOR,IAAGuB,OAAV,SAAiBF,EAAG,GAApB,OAA0BL,SAjED,QAAvBR,EAAOR,GAAGqB,GAAGP,OAAyC,UAAtBN,EAAOR,GAAGqB,GAAGT,OAC/CY,GAAqB,GAqE7B,OAAOhB,EDtKQmB,CAFH,kTAGZ,OACE,qBAAK/B,UAAU,MAAf,SACIQ,EAAOwB,KAAI,SAAAnB,GAAI,OAAI,qBAAKb,UAAU,WAAf,SAA0B,8BAAMa,EAAKmB,KAAI,SAAAC,GAAK,OAAI,sBAAMjC,UAAWiC,EAAMf,MAAvB,SAA+Be,EAAMjB,oBEWnGkB,EAjBA,WACb,OACE,sBAAKlC,UAAU,SAAf,UACE,sBAAKA,UAAU,gBAAf,UACE,qBAAKA,UAAU,sBAAf,oBACA,sBAAKA,UAAU,8BAAf,UACE,qBAAKA,UAAU,yBAAf,sBACA,qBAAKA,UAAU,0BAAf,wBAGJ,qBAAKA,UAAU,aAAf,SACE,cAAC,EAAD,UCIOmC,G,MAhBA,WAEb,OACE,sBAAKnC,UAAU,SAAf,UACE,qBAAKA,UAAU,gBAAf,SACE,qBAAKA,UAAU,sBAAf,sBAEF,qBAAKA,UAAU,yBAAf,SACE,wBAAQA,UAAU,eAAeoC,IAAK,gCAAkCC,mBAPlE,8KASR,qBAAKrC,UAAU,sBCKNsC,EAZH,WACV,OACE,qCACE,cAAC,EAAD,IACA,sBAAKtC,UAAU,OAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,WCPRuC,IAASC,OAAO,cAAC,EAAD,IAAQC,SAASC,eAAe,W","file":"static/js/main.b00603ad.chunk.js","sourcesContent":["import './style.css'\nimport {useRef, useState} from 'react';\n\nconst Nav = () => {\n  const scrollRef = useRef();\n\n  const scrollTo = pos => {\n    if(scrollRef.current) {\n      scrollRef.current.scrollLeft = scrollRef.current.scrollLeft + pos;\n    }\n  }\n\n  const list = () => {\n    const items = [];\n    for (let i = 1; i < 81; i++) {\n      items.push(<div className=\"navbar-btn\" key={i}>{ i }</div>)\n    }\n    return items;\n  }\n  return (\n    <div className=\"navbar\">\n      <div className=\"navbar-btn\">home</div>\n      <div className=\"navbar-btn navbar-help\" onClick={() => scrollTo(-100)}><div className=\"navbar-prev\"></div></div>\n      <div ref={scrollRef} className=\"scrollable\">\n        {list()}\n      </div>\n      <div className=\"navbar-btn navbar-help\" onClick={() => scrollTo(100)}><div className=\"navbar-next\"></div></div>\n    </div>\n  )\n};\n\nexport default Nav;","import './style.css';\nimport parse from '../../lib/parse';\n\nconst IDE = () => {\n  const out = \"<div>\\n  <p b></p>\\n</div>\\n<style>\\n  *{\\n    border-radius: 20px;\\n  }\\n  body{\\n    background: #293462;\\n    margin: 90px 100px;\\n  }\\n  div{\\n    background: #FE5F55;\\n    padding: 14px 30px;\\n    box-shadow: 0px 20px #A64942;\\n  }\\n  p{\\n    background: #A64942;\\n    height: 40px;\\n  }\\n</style>\";\n  // const out = \"<div><p><style>*{border-radius:20px}body{background:#293462;margin:90 100}div{background:#FE5F55;padding:14 30;box-shadow:0 20px#A64942}p{background:#A64942;height:40\"\n  const parsed = parse(out);\n  return (\n    <div className=\"ide\">\n      { parsed.map(line => <div className=\"ide-line\"><div>{line.map(token => <span className={token.class}>{token.text}</span>)}</div></div>) }\n    </div>\n  );\n};\n\nexport default IDE;","export default function parse(input) {\n\n  // break into lines\n  const lines = input.split('\\n');\n\n  // get indents\n  const result = [];\n  for (const line of lines) {\n    const tokens = [];\n    for (let i = 0; i < line.length; i++) {\n      if (line[i] === ' ') {\n        tokens.push({\n          text: '',\n          class: 'indent'\n        })\n      } else {\n        tokens.push({\n          text: line.substr(i),\n          class: undefined\n        })\n        result.push(tokens);\n        break;\n      }\n    }\n  }\n\n  // get tags\n  for (const tokens of result) {\n    for (let i = 0; i < tokens.length; i++) {\n      if (!tokens[i].class) { // string waiting to be parsed\n        const newTokens = [];\n        const string = tokens[i].text;\n        let buffer = [];\n        let first = false;\n        let tagOpen = false;\n        for (let j = 0; j < string.length; j++) {\n          if (string[j] === '<' && tagOpen === false) { // tag starts\n            if (buffer.length) {\n              newTokens.push({\n                text: buffer.join(''),\n                class: undefined\n              });\n              buffer = [];\n            }\n            newTokens.push({\n              text: '<',\n              class: 'symbol'\n            });\n            if (string[j+1] === '/') {\n              j = j + 1;\n              newTokens.push({\n                text: '/',\n                class: 'symbol'\n              });\n            }\n            first = true;\n            tagOpen = true;\n          } else if (string[j] === ' '  && tagOpen === true) { // space inside tag\n            newTokens.push({\n              text: buffer.join(''),\n              class: first ? 'tag' : 'attr'\n            });\n            first = false;\n            buffer = [];\n            newTokens.push({\n              text: ' ',\n              class: 'space'\n            });\n          } else if (string[j] === '>' && tagOpen === true) { // tag ends\n            newTokens.push({\n              text: buffer.join(''),\n              class: first ? 'tag' : 'attr'\n            });\n            first = false;\n            buffer = [];\n            newTokens.push({\n              text: '>',\n              class: 'symbol'\n            });\n            tagOpen = false;\n          } else {\n            buffer.push(string[j]);\n          }\n        }\n        if (buffer.length) {\n          newTokens.push({\n            text: buffer.join(''),\n            class: undefined\n          });\n          buffer = [];\n        }\n        tokens.splice(i, 1, ...newTokens);\n      }\n    }\n  }\n\n  // find styles to parse\n  let foundStylesToParse = false\n  let inRuleBlock = false;\n  for (let i = 0; i < result.length; i++) {\n    for (let j = 0; j < result[i].length; j++) {\n      if (!foundStylesToParse) {\n        if (result[i][j].class === 'tag' && result[i][j].text === 'style') {\n          foundStylesToParse = true;\n        }\n      } else {\n        // parse the styles\n        if (!result[i][j].class) { // find unfinished string\n          const newTokens = [];\n          let string = result[i][j].text;\n          let buffer = [];\n          for (let k = 0; k < string.length; k++) {\n            if (string[k] === '{') { // signals end of specifier, empty buffer as the specifier\n              newTokens.push({\n                text: buffer.join(''),\n                class: 'specifier'\n              });\n              newTokens.push({\n                text: '{',\n                class: 'symbol'\n              });\n              buffer = [];\n              inRuleBlock = true;\n            } else if (string[k] === '}') { // end of rule block. empty buffer as a css value\n              if (buffer.length) {\n                newTokens.push({\n                  text: buffer.join(''),\n                  class: 'value'\n                });\n                buffer = [];\n              }\n              newTokens.push({\n                text: '}',\n                class: 'symbol'\n              });\n              inRuleBlock = false;\n            } else if (string[k] === ':' && inRuleBlock) { // signifies seperator for css property and css value\n              newTokens.push({\n                text: buffer.join(''),\n                class: 'key'\n              });\n              newTokens.push({\n                text: ':',\n                class: 'symbol'\n              });\n              buffer = [];\n            } else if (string[k] === ';' && inRuleBlock) { // signifies end of \n              newTokens.push({\n                text: buffer.join(''),\n                class: 'value'\n              });\n              newTokens.push({\n                text: ';',\n                class: 'symbol'\n              });\n              buffer = [];\n            } else {\n              buffer.push(string[k]);\n            }\n          }\n          if (buffer.length) {\n            newTokens.push({\n              text: buffer.join(''),\n              class: 'value'\n            });\n            buffer = [];\n          }\n          result[i].splice(j, 1, ...newTokens);\n        }\n      }\n    }\n  }\n  return result;\n}","import './style.css';\nimport IDE from '../IDE';\n\nconst Editor = () => {\n  return (\n    <div className=\"editor\">\n      <div className=\"editor-header\">\n        <div className=\"editor-header-title\">EDITOR</div>\n        <div className=\"editor-header-mode-selector\">\n          <div className=\"editor-header-mode-min\">Minified</div>\n          <div className=\"editor-header-mode-full\">Full</div>\n        </div>\n      </div>\n      <div className=\"editor-ide\">\n        <IDE/>        \n      </div>\n    </div>\n  );\n};\n\nexport default Editor;","import './style.css';\n\nconst Output = () => {\n  const out = \"<div><p><style>*{border-radius:20px}body{background:#293462;margin:90 100}div{background:#FE5F55;padding:14 30;box-shadow:0 20px#A64942}p{background:#A64942;height:40\";\n  return (\n    <div className=\"output\">\n      <div className=\"output-header\">\n        <div className=\"output-header-title\">OUTPUT</div>\n      </div>\n      <div className=\"output-frame-container\">\n        <iframe className=\"output-frame\" src={\"data:text/html;charset=UTF-8,\" + encodeURIComponent(out)}/>\n      </div>\n      <div className=\"output-score\">\n      </div>\n    </div>\n  );\n};\n\nexport default Output;","import './style.css';\nimport Nav from '../nav';\nimport Editor from '../Editor';\nimport Output from '../Output';\n\nconst App = () => {\n  return (\n    <>\n      <Nav/>\n      <div className=\"flex\">\n        <Editor/>\n        <Output/>\n      </div>\n    </>\n  );\n};\n\nexport default App;","import ReactDOM from \"react-dom\"\n\nimport App from './components/App'\n\nReactDOM.render(<App/>, document.getElementById('root'));\n"],"sourceRoot":""}